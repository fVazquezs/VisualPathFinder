{"version":3,"sources":["PathFinderBoard/Node.js","Algorithms/AStar.js","PathFinderBoard/PathFinderBoard.js","App.js","index.js"],"names":["Node","info","className","isStart","isEnd","isPath","isWall","isNeighbour","startNode","endNode","nodes","setNodes","calculateNodeToNode","node","target","dstRow","Math","abs","row","dstColumn","column","closedSet","Set","openSet","push","currentNode","i","length","fCost","hCost","filter","add","helper","parent","TrackPathBack","neighbours","checkRow","checkColumn","forEach","findNeighbours","neighbour","has","newMovementCostToNEighbour","gCost","PathFinderBoard","useState","mouseIsDown","setMouseIsDown","setStartNode","setEndNode","useEffect","currentNodes","currentRow","onClick","AStar","console","log","map","onMouseDownCapture","onMouseUp","index","nodeIndex","handleNodeClick","onMouseOver","handleMouseOver","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7f5ae40.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Node.css';\r\n\r\nconst Node = ({ info }) => {\r\n    const className = info.isStart ? 'is-start' :\r\n        info.isEnd ? 'is-end' :\r\n            info.isPath ? 'is-path' :\r\n                info.isWall ? 'is-wall' :\r\n                    info.isNeighbour ? 'is-neighbour' : '';\r\n    return <div className={`node-square ${className}`} />\r\n}\r\n\r\nexport default Node;","export default (startNode, endNode, nodes, setNodes) => {\r\n    const findNeighbours = (node) => {\r\n        const neighbours = [];\r\n        for (let row = -1; row <= 1; row++) {\r\n            for (let column = -1; column <= 1; column++) {\r\n                if (!(row === 0 && column === 0)) {\r\n                    let checkRow = node.row + row;\r\n                    let checkColumn = node.column + column;\r\n\r\n                    if (nodes.length > checkRow && checkRow >= 0 && nodes[0].length > checkColumn && checkColumn >= 0) {\r\n                        neighbours.push(nodes[checkRow][checkColumn])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let helper = nodes;\r\n        neighbours.forEach(node => {\r\n            helper[node.row][node.column] = { ...helper[node.row][node.column], isNeighbour: true };\r\n        });\r\n\r\n        setNodes([...helper]);\r\n        return neighbours;\r\n    }\r\n\r\n    const calculateNodeToNode = (node, target) => {\r\n        let dstRow = Math.abs(node.row - target.row);\r\n        let dstColumn = Math.abs(node.column - target.column);\r\n\r\n        if (dstRow > dstColumn) {\r\n            return 14 * dstColumn + 10 * (dstRow - dstColumn);\r\n        } else {\r\n            return 14 * dstRow + 10 * (dstColumn - dstRow);\r\n        }\r\n    }\r\n\r\n    const TrackPathBack = () => {\r\n        let currentNode = endNode;\r\n\r\n        while(startNode.row !== currentNode.row && startNode.column !== currentNode.column) {\r\n            let helper = nodes;\r\n            helper[currentNode.row][currentNode.column] = { ...helper[currentNode.row][currentNode.column], isNeighbour: false, isPath: true };\r\n            setNodes([...helper]);\r\n            currentNode = currentNode.parent;\r\n        }\r\n    }\r\n\r\n    let closedSet = new Set();\r\n    let openSet = [];\r\n    openSet.push(startNode);\r\n\r\n    while (openSet.length > 0) {\r\n        let currentNode = openSet[0];\r\n        for (let i = 0; i < openSet.length; i++) {\r\n            if (openSet[i].fCost < currentNode.fCost || openSet[i].fCost === currentNode.fCost && openSet[i].hCost < currentNode.hCost) {\r\n                currentNode = openSet[i];\r\n            }\r\n        }\r\n\r\n        openSet = openSet.filter(node => node.row !== currentNode.row && node.column !== currentNode.column);\r\n        closedSet.add(currentNode);\r\n\r\n        if (currentNode.row === endNode.row && currentNode.column === endNode.column) {\r\n            TrackPathBack();\r\n            return;\r\n        }\r\n\r\n        findNeighbours(currentNode).forEach(neighbour => {\r\n            if (neighbour.isWall || closedSet.has(neighbour)) {\r\n                return;\r\n            }\r\n            let newMovementCostToNEighbour = currentNode.gCost + calculateNodeToNode(currentNode, neighbour);\r\n            if (newMovementCostToNEighbour < neighbour.gCost || openSet.filter(node => node.row === neighbour.row && node.column === neighbour.column).length === 0) {\r\n                neighbour.gCost = newMovementCostToNEighbour;\r\n                neighbour.hCost = calculateNodeToNode(neighbour, endNode);\r\n                neighbour.fCost = neighbour.gCost + neighbour.hCost;\r\n                neighbour.parent = currentNode;\r\n\r\n                if (openSet.filter(node => node.row === neighbour.row && node.column === neighbour.column).length === 0) {\r\n                    openSet.push(neighbour)\r\n                }\r\n                let helper = nodes;\r\n                helper[neighbour.row][neighbour.column] = { ...helper[neighbour.row][neighbour.column], fCost: neighbour.fCost };\r\n                setNodes([...helper]);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Node from './Node';\r\nimport './PathFinderBoard.css';\r\nimport AStar from '../Algorithms/AStar';\r\n\r\nconst PathFinderBoard = () => {\r\n\r\n    const [nodes, setNodes] = useState([]);\r\n    const [mouseIsDown, setMouseIsDown] = useState(false);\r\n\r\n\r\n\r\n    const [startNode, setStartNode] = useState();\r\n    const [endNode, setEndNode] = useState();\r\n\r\n    useEffect(() => {\r\n        const currentNodes = [];\r\n        for (let row = 0; row < 50; row++) {\r\n            const currentRow = [];\r\n            for (let column = 0; column < 20; column++) {\r\n                currentRow.push({\r\n                    row,\r\n                    column,\r\n                    gCost: 0,\r\n                    hCost: 0,\r\n                    fCost: 0\r\n                })\r\n            }\r\n            currentNodes.push(currentRow);\r\n        }\r\n        setNodes(currentNodes);\r\n    }, []);\r\n\r\n    const handleNodeClick = ({ row, column }) => {\r\n        let helper = nodes;\r\n        if (!startNode) {\r\n            helper[row][column] = { ...helper[row][column], isStart: true };\r\n            setStartNode(helper[row][column]);\r\n        } else if (!endNode) {\r\n            helper[row][column] = { ...helper[row][column], isEnd: true };\r\n            setEndNode(helper[row][column]);\r\n        }\r\n        setNodes([...helper]);\r\n    }\r\n\r\n    const handleMouseOver = ({ row, column }) => {\r\n        if (mouseIsDown) {\r\n            console.log('creating wall')\r\n            let helper = nodes;\r\n            if (\r\n                (startNode && (startNode.row !== row || startNode.column !== column)) //not starting node\r\n                && (endNode && (endNode.row !== row || endNode.column !== column))//not ending node\r\n            ) {\r\n                helper[row][column] = { ...helper[row][column], isWall: true };\r\n            }\r\n            setNodes([...helper]);\r\n        }\r\n    }\r\n\r\n    const startSearch = () => {\r\n        AStar(startNode, endNode, nodes, setNodes);\r\n        console.log(startNode)\r\n        console.log(endNode)\r\n    }\r\n\r\n    const clearBoard = () => {\r\n        let helper = nodes.map(row => row.map(({ row, column }) => {\r\n            return {\r\n                row,\r\n                column,\r\n                gCost: 0,\r\n                hCost: 0,\r\n                fCost: 0\r\n            }\r\n        }))\r\n        setEndNode(null);\r\n        setStartNode(null);\r\n        setNodes([...helper]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {mouseIsDown ? \"mouse down\" : \"\"}\r\n            <button onClick={startSearch}>Start</button>\r\n            <button onClick={clearBoard}>Clear board</button>\r\n            <div className='board' onMouseDownCapture={() => setMouseIsDown(true)} onMouseUp={() => setMouseIsDown(false)}>\r\n                {nodes.map((row, index) => (\r\n                    <div className=\"row\" key={index}>\r\n                        {row.map((node, nodeIndex) => (\r\n                            <div key={nodeIndex} onClick={() => handleNodeClick(node)} onMouseOver={() => handleMouseOver(node)}>\r\n                                <Node info={node} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PathFinderBoard;","import PathFinderBoard from \"./PathFinderBoard/PathFinderBoard\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathFinderBoard></PathFinderBoard>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}